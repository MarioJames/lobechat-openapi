openapi: 3.1.0
info:
  title: LobeChat OpenAPI
  version: 1.0.0
  description: Unified OpenAPI spec merged from all route specs under packages/openapi/src/routes (excluding chat.route.ts).
servers:
  - url: /api/v1
security:
  - BearerAuth: []

paths:
  /users/me:
    get:
      tags: [Users]
      summary: Get current authenticated user
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseUser' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /users:
    get:
      tags: [Users]
      summary: List users (searchable, paginated)
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseUserList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateUserRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseUser' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /users/{id}:
    parameters:
      - name: id
        x-stainless-param-name: userId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Users]
      summary: Get user by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseUser' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Users]
      summary: Update user (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseUser' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Users]
      summary: Delete user
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /users/{id}/roles:
    parameters:
      - name: id
        x-stainless-param-name: userId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Users]
      summary: Get user roles
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseUserRoles' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Users]
      summary: Update user roles (add/remove)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRolesRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseUserRoles' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Users]
      summary: Clear all roles of user
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseUserRolesCleared',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /agents:
    get:
      tags: [Agents]
      summary: List agents
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseAgentList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Agents]
      summary: Create agent
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAgentRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseAgent' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /agents/{id}:
    parameters:
      - name: id
        x-stainless-param-name: agentId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Agents]
      summary: Get agent by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseAgent' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Agents]
      summary: Update agent (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateAgentRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseAgent' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Agents]
      summary: Delete agent
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /files:
    get:
      tags: [Files]
      summary: List files
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: fileType
          schema: { type: string }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: userId
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseFileList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Files]
      summary: Upload a file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                knowledgeBaseId: { type: string, nullable: true }
                sessionId: { type: string, nullable: true }
                skipCheckFileType: { type: boolean, nullable: true }
                directory: { type: string, nullable: true }
                skipExist: { type: boolean, nullable: true }
              required: [file]
      responses:
        '200':
          {
            description: Uploaded,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseFileDetail' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /files/{id}:
    parameters:
      - name: id
        x-stainless-param-name: fileId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Files]
      summary: Get file detail
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseFileDetail' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Files]
      summary: Delete file
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /files/{id}/url:
    parameters:
      - name: id
        x-stainless-param-name: fileId
        in: path
        required: true
        schema: { type: string }
      - in: query
        name: expiresIn
        schema: { type: integer }
    get:
      tags: [Files]
      summary: Get presigned URL for the file
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseFileUrl' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /files/{id}/parses:
    parameters:
      - name: id
        x-stainless-param-name: fileId
        in: path
        required: true
        schema: { type: string }
      - in: query
        name: skipExist
        schema: { type: boolean }
    post:
      tags: [Files]
      summary: Parse file content
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseFileParse' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /files/batches:
    post:
      tags: [Files]
      summary: Batch upload files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                knowledgeBaseId: { type: string, nullable: true }
                sessionId: { type: string, nullable: true }
                skipCheckFileType: { type: boolean, nullable: true }
                directory: { type: string, nullable: true }
                skipExist: { type: boolean, nullable: true }
              required: [files]
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseBatchFileUpload',
                      },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }

  /files/queries:
    post:
      tags: [Files]
      summary: Batch get files by IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileIds:
                  type: array
                  items: { type: string }
              required: [fileIds]
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseBatchGetFiles' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /messages/count:
    get:
      tags: [Messages]
      summary: Count messages
      parameters:
        - in: query
          name: topicIds
          schema: { type: string }
          description: Comma-separated topic IDs
        - in: query
          name: userId
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseCount' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /messages:
    get:
      tags: [Messages]
      summary: List messages
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: topicId
          schema: { type: string }
        - in: query
          name: sessionId
          schema: { type: string }
        - in: query
          name: userId
          schema: { type: string }
        - in: query
          name: role
          schema:
            { type: string, enum: ['user', 'system', 'assistant', 'tool'] }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseMessageList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    delete:
      tags: [Messages]
      summary: Delete messages (batch)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageIds:
                  type: array
                  items: { type: string }
              required: [messageIds]
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseBatchDeleteResult',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Messages]
      summary: Create message
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateMessageRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseMessage' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /messages/{id}:
    parameters:
      - name: id
        x-stainless-param-name: messageId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Messages]
      summary: Get message by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseMessage' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Messages]
      summary: Delete message by ID
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /messages/repies:
    post:
      tags: [Messages]
      summary: Create message and AI reply
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateMessageRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseMessage' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /message-translations/{messageId}:
    parameters:
      - name: messageId
        in: path
        required: true
        schema: { type: string }
    post:
      tags: [MessageTranslations]
      summary: Translate a message
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TranslateTrigger' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseTranslation' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    get:
      tags: [MessageTranslations]
      summary: Get translation info for a message
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseTranslation' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [MessageTranslations]
      summary: Update translation info for a message
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TranslateUpdate' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseTranslation' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    delete:
      tags: [MessageTranslations]
      summary: Delete translation info for a message
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /models:
    get:
      tags: [Models]
      summary: List models
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseModelList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Models]
      summary: Create model
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateModelRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseModel' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /models/{providerId}/{modelId}:
    parameters:
      - name: providerId
        x-stainless-param-name: pathProviderId
        in: path
        required: true
        schema: { type: string }
      - name: modelId
        x-stainless-param-name: pathModelId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Models]
      summary: Get model detail
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseModel' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Models]
      summary: Update model (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateModelRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseModel' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /permissions:
    get:
      tags: [Permissions]
      summary: List permissions
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: active
          schema: { type: boolean }
        - in: query
          name: category
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponsePermissionList',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Permissions]
      summary: Create permission
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreatePermissionRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponsePermission' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /permissions/{id}:
    parameters:
      - name: id
        x-stainless-param-name: permissionId
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [Permissions]
      summary: Get permission by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponsePermission' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Permissions]
      summary: Update permission (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdatePermissionRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponsePermission' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Permissions]
      summary: Delete permission
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /providers:
    get:
      tags: [Providers]
      summary: List AI providers
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: enabled
          schema: { type: boolean }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseProviderList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Providers]
      summary: Create provider
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateProviderRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseProvider' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /providers/{id}:
    parameters:
      - name: id
        x-stainless-param-name: providerId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Providers]
      summary: Get provider detail
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseProvider' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Providers]
      summary: Update provider (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProviderRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseProvider' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Providers]
      summary: Delete provider
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /roles:
    get:
      tags: [Roles]
      summary: List roles
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: active
          schema: { type: boolean }
        - in: query
          name: system
          schema: { type: boolean }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseRoleList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Roles]
      summary: Create role
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateRoleRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseRole' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /roles/{id}:
    parameters:
      - name: id
        x-stainless-param-name: roleId
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [Roles]
      summary: Get role by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseRole' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Roles]
      summary: Update role (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateRoleRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseRole' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Roles]
      summary: Delete role
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /roles/{id}/permissions:
    parameters:
      - name: id
        x-stainless-param-name: roleId
        in: path
        required: true
        schema: { type: integer, minimum: 1 }
    get:
      tags: [Roles]
      summary: List role permissions
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseRolePermissions',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    patch:
      tags: [Roles]
      summary: Update role permissions (grant/revoke)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              { $ref: '#/components/schemas/UpdateRolePermissionsRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseRolePermissions',
                      },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    delete:
      tags: [Roles]
      summary: Clear all permissions for role
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /session-groups:
    get:
      tags: [SessionGroups]
      summary: List session groups
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseSessionGroupList',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [SessionGroups]
      summary: Create session group
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSessionGroupRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseSessionGroup' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /session-groups/{id}:
    parameters:
      - name: id
        x-stainless-param-name: sessionGroupId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [SessionGroups]
      summary: Get session group by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseSessionGroup' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [SessionGroups]
      summary: Update session group (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSessionGroupRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseSessionGroup' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [SessionGroups]
      summary: Delete session group
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /sessions:
    get:
      tags: [Sessions]
      summary: List sessions
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: agentId
          schema: { type: string }
        - in: query
          name: ids
          schema: { type: string }
          description: Comma-separated session IDs
        - in: query
          name: userId
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseSessionList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Sessions]
      summary: Create session
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSessionRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseSession' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    patch:
      tags: [Sessions]
      summary: Batch update sessions
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BatchUpdateSessionsRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseSessionList' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /sessions/groups:
    get:
      tags: [Sessions]
      summary: List sessions grouped by agent
      parameters:
        - in: query
          name: groupBy
          schema: { type: string, enum: ['agent'] }
          required: true
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        $ref: '#/components/schemas/ApiResponseSessionsGroups',
                      },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /sessions/{id}:
    parameters:
      - name: id
        x-stainless-param-name: sessionId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Sessions]
      summary: Get session by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseSession' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Sessions]
      summary: Update session (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSessionRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema: { $ref: '#/components/schemas/ApiResponseSession' },
                  },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Sessions]
      summary: Delete session
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /topics:
    get:
      tags: [Topics]
      summary: List topics
      parameters:
        - in: query
          name: keyword
          schema: { type: string, maxLength: 100 }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: sessionId
          schema: { type: string }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  {
                    schema:
                      { $ref: '#/components/schemas/ApiResponseTopicList' },
                  },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      tags: [Topics]
      summary: Create topic
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTopicRequest' }
      responses:
        '200':
          {
            description: Created,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseTopic' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /topics/{id}:
    parameters:
      - name: id
        x-stainless-param-name: topicId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Topics]
      summary: Get topic by ID
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseTopic' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    patch:
      tags: [Topics]
      summary: Update topic (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateTopicRequest' }
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseTopic' } },
              },
          }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
    delete:
      tags: [Topics]
      summary: Delete topic
      responses:
        '200':
          {
            description: Deleted,
            content:
              {
                application/json:
                  { schema: { $ref: '#/components/schemas/ApiResponseVoid' } },
              },
          }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequestError: { description: Bad Request }
    UnauthorizedError: { description: Unauthorized }
    ForbiddenError: { description: Forbidden }
    NotFoundError: { description: Not Found }
  schemas:
    # ---------- Common wrappers ----------
    ApiResponseBase:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string, nullable: true }
        timestamp: { type: string, format: date-time }
      required: [success, timestamp]
    ApiResponseVoid:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            # Explicit type to avoid ambiguous schema (nullable still allows null)
            data:
              {
                type: object,
                nullable: true,
                description: Empty response payload,
              }

    # ---------- Users ----------
    ApiResponseUser:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/UserWithRoles' }
    ApiResponseUserList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                users:
                  type: array
                  items: { $ref: '#/components/schemas/UserWithRoles' }
              required: [total, users]
    ApiResponseUserRoles:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/UserRoleEntry' }
    ApiResponseUserRolesCleared:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                removed: { type: integer }
                userId: { type: string }
              required: [removed, userId]
    User:
      type: object
      properties:
        id: { type: string }
        username: { type: string, nullable: true }
        email: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        firstName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        fullName: { type: string, nullable: true }
        isOnboarded: { type: boolean }
        clerkCreatedAt: { type: string, format: date-time, nullable: true }
        emailVerifiedAt: { type: string, format: date-time, nullable: true }
        preference: { type: object, additionalProperties: true, nullable: true }
        accessedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, isOnboarded, createdAt, updatedAt, accessedAt]
    Role:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        displayName: { type: string }
        description: { type: string, nullable: true }
        isSystem: { type: boolean }
        isActive: { type: boolean }
        metadata: { type: object, additionalProperties: true, nullable: true }
        accessedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    UserWithRoles:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            messageCount: { type: integer }
            roles:
              type: array
              items: { $ref: '#/components/schemas/Role' }
    UserRoleEntry:
      type: object
      properties:
        roleId: { type: integer }
        roleName: { type: string }
        roleDisplayName: { type: string }
        expiresAt: { type: string, format: date-time, nullable: true }
      required: [roleId, roleName, roleDisplayName]
    CreateUserRequest:
      type: object
      properties:
        id: { type: string, nullable: true }
        username: { type: string, nullable: true, minLength: 1 }
        email: { type: string, format: email, nullable: true }
        avatar: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        firstName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        fullName: { type: string, nullable: true }
        roleIds:
          type: array
          items: { type: integer, minimum: 1 }
          nullable: true
      additionalProperties: false
    UpdateUserRequest:
      type: object
      properties:
        username: { type: string, nullable: true, minLength: 1 }
        email: { type: string, format: email, nullable: true }
        avatar: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        firstName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        fullName: { type: string, nullable: true }
        isOnboarded: { type: boolean, nullable: true }
        preference: { type: object, additionalProperties: true, nullable: true }
        roleIds:
          type: array
          items: { type: integer, minimum: 1 }
          nullable: true
      additionalProperties: false
    AddRoleRequest:
      type: object
      properties:
        roleId: { type: integer, minimum: 1 }
        expiresAt: { type: string, format: date-time, nullable: true }
      required: [roleId]
    UpdateUserRolesRequest:
      type: object
      description: At least one of addRoles or removeRoles must be provided.
      properties:
        addRoles:
          type: array
          items: { $ref: '#/components/schemas/AddRoleRequest' }
        removeRoles:
          type: array
          items: { type: integer, minimum: 1 }
      anyOf:
        - required: [addRoles]
        - required: [removeRoles]

    # ---------- Agents ----------
    ApiResponseAgent:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Agent' }
    ApiResponseAgentList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                agents:
                  type: array
                  items: { $ref: '#/components/schemas/Agent' }
              required: [total, agents]
    Agent:
      type: object
      properties:
        id: { type: string }
        title: { type: string, nullable: true }
        description: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        model: { type: string, nullable: true }
        provider: { type: string, nullable: true }
        systemRole: { type: string, nullable: true }
        chatConfig: { type: object, additionalProperties: true, nullable: true }
        params: { type: object, additionalProperties: true, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
        accessedAt: { type: string, format: date-time, nullable: true }
      required: [id]
    CreateAgentRequest:
      type: object
      properties:
        title: { type: string }
        description: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        model: { type: string, nullable: true }
        provider: { type: string, nullable: true }
        systemRole: { type: string, nullable: true }
        chatConfig: { type: object, additionalProperties: true, nullable: true }
        params: { type: object, additionalProperties: true, nullable: true }
      required: [title]
    UpdateAgentRequest:
      allOf:
        - $ref: '#/components/schemas/CreateAgentRequest'

    # ---------- Files ----------
    ApiResponseFileList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                files:
                  type: array
                  items: { $ref: '#/components/schemas/File' }
              required: [total, files]
    ApiResponseFileDetail:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/FileDetail' }
    ApiResponseFileUrl:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/FileUrl' }
    ApiResponseFileParse:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/FileParse' }
    ApiResponseBatchFileUpload:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/BatchFileUpload' }
    ApiResponseBatchGetFiles:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/BatchGetFiles' }
    File:
      type: object
      properties:
        id: { type: string }
        name: { type: string, nullable: true }
        size: { type: integer, nullable: true }
        fileType: { type: string, nullable: true }
        userId: { type: string, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    FileDetail:
      type: object
      properties:
        file: { $ref: '#/components/schemas/File' }
        parsed: { $ref: '#/components/schemas/FileParse', nullable: true }
      required: [file]
    FileUrl:
      type: object
      properties:
        fileId: { type: string }
        name: { type: string }
        url: { type: string }
        expiresIn: { type: integer }
        expiresAt: { type: string, format: date-time }
      required: [fileId, name, url, expiresIn, expiresAt]
    FileParse:
      type: object
      properties:
        fileId: { type: string }
        name: { type: string }
        fileType: { type: string }
        parseStatus: { type: string, enum: ['completed', 'failed'] }
        parsedAt: { type: string, format: date-time, nullable: true }
        content: { type: string, nullable: true }
        error: { type: string, nullable: true }
        metadata:
          type: object
          properties:
            pages: { type: integer, nullable: true }
            title: { type: string, nullable: true }
            totalCharCount: { type: integer, nullable: true }
            totalLineCount: { type: integer, nullable: true }
    BatchFileUpload:
      type: object
      properties:
        summary:
          type: object
          properties:
            total: { type: integer }
            successful: { type: integer }
            failed: { type: integer }
          required: [total, successful, failed]
        successful:
          type: array
          items: { $ref: '#/components/schemas/FileDetail' }
        failed:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              error: { type: string }
            required: [name, error]
    BatchGetFiles:
      type: object
      properties:
        total: { type: integer }
        success: { type: integer }
        files:
          type: array
          items: { $ref: '#/components/schemas/FileDetail' }
        failed:
          type: array
          items:
            type: object
            properties:
              fileId: { type: string }
              error: { type: string }
            required: [fileId, error]
      required: [total, success, files, failed]

    # ---------- Messages ----------
    ApiResponseCount:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              additionalProperties: true
    ApiResponseMessage:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Message' }
    ApiResponseMessageList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                messages:
                  type: array
                  items: { $ref: '#/components/schemas/Message' }
              required: [total, messages]
    ApiResponseBatchDeleteResult:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              additionalProperties: true
    Message:
      type: object
      properties:
        id: { type: string }
        content: { type: string, nullable: true }
        role:
          {
            type: string,
            enum: ['user', 'system', 'assistant', 'tool'],
            nullable: true,
          }
        sessionId: { type: string, nullable: true }
        topicId: { type: string, nullable: true }
        parentId: { type: string, nullable: true }
        clientId: { type: string, nullable: true }
        metadata: { type: object, additionalProperties: true, nullable: true }
        reasoning: { type: object, additionalProperties: true, nullable: true }
        search: { type: object, additionalProperties: true, nullable: true }
        tools: { type: object, additionalProperties: true, nullable: true }
        files:
          type: array
          items: { type: string }
          nullable: true
        favorite: { type: boolean, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateMessageRequest:
      type: object
      properties:
        content: { type: string }
        role: { type: string, enum: ['user', 'system', 'assistant', 'tool'] }
        model: { type: string, nullable: true }
        provider: { type: string, nullable: true }
        sessionId: { type: string, nullable: true }
        topicId: { type: string, nullable: true }
        threadId: { type: string, nullable: true }
        parentId: { type: string, nullable: true }
        quotaId: { type: string, nullable: true }
        agentId: { type: string, nullable: true }
        clientId: { type: string, nullable: true }
        metadata: { type: object, additionalProperties: true, nullable: true }
        reasoning: { type: object, additionalProperties: true, nullable: true }
        search: { type: object, additionalProperties: true, nullable: true }
        tools: { type: object, additionalProperties: true, nullable: true }
        traceId: { type: string, nullable: true }
        observationId: { type: string, nullable: true }
        files:
          type: array
          items: { type: string }
        favorite: { type: boolean, nullable: true }
      required: [content, role]

    # ---------- Message Translations ----------
    ApiResponseTranslation:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/MessageTranslation' }
    TranslateTrigger:
      type: object
      properties:
        from: { type: string }
        to: { type: string }
        provider: { type: string, nullable: true }
        model: { type: string, nullable: true }
      required: [from, to]
    TranslateUpdate:
      allOf:
        - $ref: '#/components/schemas/TranslateTrigger'
        - type: object
          properties:
            translatedContent: { type: string }
          required: [translatedContent]
    MessageTranslation:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        clientId: { type: string, nullable: true }
        content: { type: string, nullable: true }
        from: { type: string, nullable: true }
        to: { type: string, nullable: true }
      required: [id, userId]

    # ---------- Models ----------
    ApiResponseModel:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Model' }
    ApiResponseModelList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                models:
                  type: array
                  items: { $ref: '#/components/schemas/Model' }
              required: [total, models]
    Model:
      type: object
      properties:
        id: { type: string }
        providerId: { type: string }
        displayName: { type: string }
        type:
          {
            type: string,
            enum:
              [
                'chat',
                'embedding',
                'tts',
                'stt',
                'image',
                'text2video',
                'text2music',
                'realtime',
              ],
            nullable: true,
          }
        enabled: { type: boolean, nullable: true }
        description: { type: string, nullable: true }
        abilities: { type: object, additionalProperties: true, nullable: true }
        parameters: { type: object, additionalProperties: true, nullable: true }
        pricing: { type: object, additionalProperties: true, nullable: true }
        contextWindowTokens: { type: integer, nullable: true }
        releasedAt: { type: string, nullable: true }
        sort: { type: integer, nullable: true }
        source:
          {
            type: string,
            enum: ['remote', 'custom', 'builtin'],
            nullable: true,
          }
        organization: { type: string, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateModelRequest:
      type: object
      properties:
        id: { type: string }
        providerId: { type: string }
        displayName: { type: string }
        type:
          {
            type: string,
            enum:
              [
                'chat',
                'embedding',
                'tts',
                'stt',
                'image',
                'text2video',
                'text2music',
                'realtime',
              ],
            nullable: true,
          }
        enabled: { type: boolean, nullable: true }
        description: { type: string, nullable: true }
        abilities: { type: object, additionalProperties: true, nullable: true }
        parameters: { type: object, additionalProperties: true, nullable: true }
        pricing: { type: object, additionalProperties: true, nullable: true }
        contextWindowTokens: { type: integer, nullable: true }
        releasedAt: { type: string, nullable: true }
        sort: { type: integer, nullable: true }
        source:
          {
            type: string,
            enum: ['remote', 'custom', 'builtin'],
            nullable: true,
          }
        organization: { type: string, nullable: true }
      required: [id, providerId, displayName]
    UpdateModelRequest:
      allOf:
        - $ref: '#/components/schemas/CreateModelRequest'

    # ---------- Permissions ----------
    ApiResponsePermission:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Permission' }
    ApiResponsePermissionList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                permissions:
                  type: array
                  items: { $ref: '#/components/schemas/Permission' }
              required: [total, permissions]
    Permission:
      type: object
      properties:
        id: { type: integer }
        code: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        category: { type: string }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreatePermissionRequest:
      type: object
      properties:
        code: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        category: { type: string }
        isActive: { type: boolean, nullable: true }
      required: [code, name, category]
    UpdatePermissionRequest:
      allOf:
        - $ref: '#/components/schemas/CreatePermissionRequest'

    # ---------- Providers ----------
    ApiResponseProvider:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Provider' }
    ApiResponseProviderList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                providers:
                  type: array
                  items: { $ref: '#/components/schemas/Provider' }
              required: [total, providers]
    Provider:
      type: object
      properties:
        id: { type: string }
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        enabled: { type: boolean, nullable: true }
        logo: { type: string, nullable: true }
        source: { type: string, enum: ['builtin', 'custom'], nullable: true }
        sort: { type: integer, nullable: true }
        checkModel: { type: string, nullable: true }
        fetchOnClient: { type: boolean, nullable: true }
        keyVaults:
          type: object
          additionalProperties: { type: string }
          nullable: true
        config: { type: object, additionalProperties: true, nullable: true }
        settings: { type: object, additionalProperties: true, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateProviderRequest:
      type: object
      properties:
        id: { type: string }
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        enabled: { type: boolean, nullable: true }
        logo: { type: string, nullable: true }
        source: { type: string, enum: ['builtin', 'custom'], nullable: true }
        sort: { type: integer, nullable: true }
        checkModel: { type: string, nullable: true }
        fetchOnClient: { type: boolean, nullable: true }
        keyVaults:
          type: object
          additionalProperties: { type: string }
          nullable: true
        config: { type: object, additionalProperties: true, nullable: true }
        settings: { type: object, additionalProperties: true, nullable: true }
      required: [id]
    UpdateProviderRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProviderRequest'

    # ---------- Roles ----------
    ApiResponseRole:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Role' }
    ApiResponseRoleList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                roles:
                  type: array
                  items: { $ref: '#/components/schemas/Role' }
              required: [total, roles]
    ApiResponseRolePermissions:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                permissions:
                  type: array
                  items: { $ref: '#/components/schemas/Permission' }
                total: { type: integer }
              required: [permissions, total]
    CreateRoleRequest:
      type: object
      properties:
        name: { type: string }
        displayName: { type: string }
        description: { type: string, nullable: true }
        isSystem: { type: boolean, nullable: true }
        isActive: { type: boolean, nullable: true }
      required: [name, displayName]
    UpdateRoleRequest:
      allOf:
        - $ref: '#/components/schemas/CreateRoleRequest'
    UpdateRolePermissionsRequest:
      type: object
      properties:
        grant:
          type: array
          items: { type: integer, minimum: 1 }
        revoke:
          type: array
          items: { type: integer, minimum: 1 }

    # ---------- Session Groups ----------
    ApiResponseSessionGroup:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/SessionGroup' }
    ApiResponseSessionGroupList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: array
              items: { $ref: '#/components/schemas/SessionGroup' }
    SessionGroup:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        sort: { type: integer, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateSessionGroupRequest:
      type: object
      properties:
        name: { type: string }
        sort: { type: integer, nullable: true }
      required: [name]
    UpdateSessionGroupRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        sort: { type: integer, nullable: true }

    # ---------- Sessions ----------
    ApiResponseSession:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Session' }
    ApiResponseSessionList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                sessions:
                  type: array
                  items: { $ref: '#/components/schemas/Session' }
              required: [total, sessions]
    ApiResponseSessionsGroups:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  agent: { $ref: '#/components/schemas/Agent' }
                  sessions:
                    type: array
                    items: { $ref: '#/components/schemas/Session' }
                  total: { type: integer }
                required: [sessions, total]
    Session:
      type: object
      properties:
        id: { type: string }
        title: { type: string, nullable: true }
        description: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        backgroundColor: { type: string, nullable: true }
        agentId: { type: string, nullable: true }
        groupId: { type: string, nullable: true }
        pinned: { type: boolean, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateSessionRequest:
      type: object
      properties:
        agentId: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        backgroundColor: { type: string, nullable: true }
        config: { type: object, additionalProperties: true, nullable: true }
        description: { type: string, nullable: true }
        groupId: { type: string, nullable: true }
        meta: { type: object, additionalProperties: true, nullable: true }
        pinned: { type: boolean, nullable: true }
        title: { type: string, nullable: true }
        type: { type: string, enum: ['agent', 'group'], nullable: true }
    UpdateSessionRequest:
      type: object
      properties:
        agentId: { type: string, nullable: true }
        avatar: { type: string, nullable: true }
        backgroundColor: { type: string, nullable: true }
        description: { type: string, nullable: true }
        groupId: { type: string, nullable: true }
        pinned: { type: boolean, nullable: true }
        title: { type: string, nullable: true }
        userId: { type: string, nullable: true }
    BatchUpdateSessionsRequest:
      type: array
      items:
        type: object
        properties:
          id: { type: string }
          data: { $ref: '#/components/schemas/UpdateSessionRequest' }
        required: [id, data]

    # ---------- Topics ----------
    ApiResponseTopic:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data: { $ref: '#/components/schemas/Topic' }
    ApiResponseTopicList:
      allOf:
        - $ref: '#/components/schemas/ApiResponseBase'
        - type: object
          properties:
            data:
              type: object
              properties:
                total: { type: integer }
                topics:
                  type: array
                  items: { $ref: '#/components/schemas/Topic' }
              required: [total, topics]
    Topic:
      type: object
      properties:
        id: { type: string }
        sessionId: { type: string }
        title: { type: string }
        messageCount: { type: integer, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    CreateTopicRequest:
      type: object
      properties:
        sessionId: { type: string }
        title: { type: string }
      required: [sessionId, title]
    UpdateTopicRequest:
      type: object
      properties:
        title: { type: string }
        favorite: { type: boolean }
